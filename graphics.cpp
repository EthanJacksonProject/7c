#include "graphics.h"
#include "map.h"
#include "globals.h"

#define YELLOW 0xFFFF00
#define BROWN  0xD2691E
#define DIRT   BROWN
#define OceanLight 0x7fcdff
#define OceanDark 0x064273

#define darkGrey 0x3A3A3A
#define BoatBrown 0x5E2A0E
#define BoatTan 0xFFC18C
#define Post 0xF4A460
#define sand 0xfaea63
#define gold 0xffdf00
#define PirateBrown 0xce8d4d
#define Boots 0x615a52
#define Outer 0x767676
#define Inner 0x252525

int player[121] = {0x7fcdff, 0x7fcdff, 0x7c5f30, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7c5f30, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7c5f30, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7c5f30, 0x7c5f30, 0x7fcdff, 0x7fcdff, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0xb0b0b0, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7c5f30, 0x7c5f30, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7c5f30, 0x7c5f30, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x5e2a0e, 0x5e2a0e, 0x7c5f30, 0x7c5f30, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x7fcdff, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x7fcdff};
void draw_player(int u, int v, int key){
    if(get_active_map() == get_map(0)){
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (player[i] == 0xffc18c) colors[i] = BoatTan;
        else if (player[i] == 0xb0b0b0) colors[i] = darkGrey;
        else if (player[i] == 0x5e2a0e) colors[i] = BoatBrown;
        else if (player[i] == 0x7c5f30) colors[i] = Post;
        else if (player[i] == 0x7fcdff) colors[i] = OceanLight;
        else continue;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
    }
    if(get_active_map() == (get_map(1))){
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (player[i] == 0xffc18c) colors[i] = Post;
        else if (player[i] == 0xb0b0b0) colors[i] = Post;
        else if (player[i] == 0x5e2a0e) colors[i] = Post;
        else if (player[i] == 0x7c5f30) colors[i] = Post;
        else if (player[i] == 0x7fcdff) colors[i] = Post;
        else continue;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
    }

}

void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == '5') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

void draw_nothing(int u, int v)
{
    if(get_active_map() == (get_map(0))){
        uLCD.filled_rectangle(u, v, u+10, v+10, OceanLight);
    }
    if(get_active_map() == (get_map(1))){
        uLCD.filled_rectangle(u, v, u+10, v+10, darkGrey);
    }
}

void draw_wall(int u, int v)
{
    if(get_active_map() == (get_map(0))){
        uLCD.filled_rectangle(u, v, u+10, v+10, OceanDark);
    }
    if(get_active_map() == (get_map(1))){
        uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
    }
}

void draw_plant(int u, int v) {
    int islands[121] = {0x7fcdff, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0xce8d4d, 0x7fcdff, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xabdb23, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63};
    uLCD.BLIT(u, v, 11, 11, islands);
    wait_us(250); // Recovery time!
}

void draw_upper_status()
{
    // Draw bottom border of status bar
    uLCD.line(0, 9, 127, 9, OceanLight);
    
    // Add other status info drawing code here
}

void draw_lower_status()
{
    // Draw top border of status bar
    uLCD.line(0, 118, 128, 118, OceanLight);
    
    // Add other status info drawing code here
    
}

void draw_border()
{
    uLCD.filled_rectangle(0,     9, 127,  14, WHITE); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, WHITE); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, WHITE); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, WHITE); // Right
}

void draw_npc(int u, int v)
{
    int pirate[121] = {0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0xabdb23, 0x7fcdff, 0xabdb23, 0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xabdb23, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x000000, 0x000000, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0x000000, 0x000000, 0x000000, 0x000000, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xffffff, 0xffffff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0x7fcdff, 0xffdf00, 0xffdf00, 0xce8d4d, 0xce8d4d, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0xce8d4d, 0x7fcdff, 0xffdf00, 0xffdf00, 0x615a52, 0x615a52, 0x7fcdff, 0x7fcdff, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xce8d4d, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63};
    uLCD.BLIT(u, v, 11, 11, pirate);
    wait_us(250); // Recovery time!
}

void draw_cave(int u, int v)
{
    int cave[121] = {0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x767676, 0x767676, 0x767676, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x767676, 0x767676, 0x767676, 0x767676, 0x767676, 0x767676, 0x767676, 0x7fcdff, 0x7fcdff, 0x7fcdff, 0x767676, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0x767676, 0x7fcdff, 0x7fcdff, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0x7fcdff, 0x7fcdff, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0x7fcdff, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0x767676, 0x767676, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x252525, 0x767676, 0x767676, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xabdb23, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63, 0xfaea63};
    uLCD.BLIT(u, v, 11, 11, cave);
    wait_us(250); // Recovery time!
}

void draw_good_idol(int u, int v) {
    int GoodIdol[121] = {0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xdb2323, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xdb2323, 0xdb2323, 0xdb2323, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e};
    uLCD.BLIT(u, v, 11, 11, GoodIdol);
    wait_us(250); // Recovery time!
}

void draw_bad_idol(int u, int v) {
    int BadIdol[121] = {0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xf4a460, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xffdf00, 0x3a3a3a, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0xffdf00, 0xffdf00, 0xf4a460, 0xf4a460, 0xf4a460, 0xffdf00, 0xffdf00, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e};
    uLCD.BLIT(u, v, 11, 11, BadIdol);
    wait_us(250); // Recovery time!
}

void draw_no_idol(int u, int v) {
    int NoIdol[121] = {0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e};
    uLCD.BLIT(u, v, 11, 11, NoIdol);
    wait_us(250); // Recovery time!
}

void draw_Chest(int u, int v) {
    int Chest[121] = {0x3a3a3a, 0x3a3a3a, 0x5e2a0e, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0x5e2a0e, 0x3a3a3a, 0x3a3a3a, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x3a3a3a, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0xffdf00, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0xf4a460, 0x5e2a0e, 0xf4a460, 0xf4a460, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e, 0x5e2a0e};
    uLCD.BLIT(u, v, 11, 11, Chest);
    wait_us(250); // Recovery time!
}


